# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestEnquiry():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.wait = WebDriverWait(self.driver, 10)  # 10 second timeout
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_enquiry(self):
    try:
      # Navigate to homepage
      self.driver.get("http://localhost/travel%20ease/")
      self.driver.set_window_size(1552, 880)
      
      # Wait for and click login link
      login_link = self.wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Login")))
      login_link.click()
      
      # Wait for email field and enter email
      email_field = self.wait.until(EC.presence_of_element_located((By.ID, "email")))
      email_field.send_keys("test@example.com")
      
      # Wait for password field and enter password
      password_field = self.wait.until(EC.presence_of_element_located((By.ID, "password")))
      password_field.send_keys("User1234")
      
      # Wait for and click submit button
      submit_btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".submit-btn")))
      submit_btn.click()
      
      # Wait for and fill subject field
      subject_field = self.wait.until(EC.presence_of_element_located((By.ID, "subject")))
      subject_field.click()
      subject_field.send_keys("food")
      
      # Wait for and fill message field
      message_field = self.wait.until(EC.presence_of_element_located((By.ID, "message")))
      message_field.click()
      message_field.send_keys("is food included in the package")
      
      # Wait for and click submit button
      submit_btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".from-blue-600")))
      submit_btn.click()
      
      # Wait for and click confirmation button
      confirm_btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".bg-green-600")))
      confirm_btn.click()
      
    except Exception as e:
      print(f"Test failed with error: {str(e)}")
      raise
  
