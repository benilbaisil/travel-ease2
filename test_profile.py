# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestProfile():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.wait = WebDriverWait(self.driver, 10)  # 10 second timeout
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_profile(self):
    try:
      # Navigate to homepage
      self.driver.get("http://localhost/travel%20ease/")
      self.driver.set_window_size(1552, 880)
      
      # Login process
      login_link = self.wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Login")))
      login_link.click()
      
      # Fill login form
      email_field = self.wait.until(EC.presence_of_element_located((By.ID, "email")))
      email_field.send_keys("user@gmail.com")
      
      password_field = self.wait.until(EC.presence_of_element_located((By.ID, "password")))
      password_field.send_keys("User1234")
      
      submit_btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".submit-btn")))
      submit_btn.click()
      
      # Wait for login to complete and profile link to be visible
      time.sleep(2)  # Give time for the page to load after login
      
      # Try different selectors for the profile link
      profile_selectors = [
        (By.CSS_SELECTOR, ".flex > .ml-2:nth-child(2)"),  # Original selector
        (By.CSS_SELECTOR, "a[href*='profile']"),          # Link containing 'profile'
        (By.CSS_SELECTOR, ".user-menu a"),                # User menu link
        (By.LINK_TEXT, "Profile"),                        # Exact link text
        (By.CSS_SELECTOR, ".nav-link[href*='profile']")   # Navigation link
      ]
      
      profile_link = None
      for selector in profile_selectors:
        try:
          profile_link = self.wait.until(EC.element_to_be_clickable(selector))
          if profile_link:
            break
        except:
          continue
      
      if not profile_link:
        raise Exception("Could not find profile link after login")
      
      profile_link.click()
      
      # Wait for profile page to load
      time.sleep(2)
      
      # Update profile
      edit_button = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".w-full:nth-child(3)")))
      edit_button.click()
      
      profile_info = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#profileInfo .w-full")))
      profile_info.click()
      
      name_field = self.wait.until(EC.element_to_be_clickable((By.ID, "editName")))
      name_field.clear()
      name_field.send_keys("benil baisil")
      
      save_button = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".flex-1:nth-child(1)")))
      save_button.click()
      
      # Wait for alert and verify message
      alert = self.wait.until(EC.alert_is_present())
      assert alert.text == "Profile updated successfully!"
      alert.accept()
      
    except Exception as e:
      print(f"Test failed with error: {str(e)}")
      raise
  
