# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestDeactivate():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.wait = WebDriverWait(self.driver, 10)  # 10 second timeout
        self.vars = {}
    
    def teardown_method(self, method):
        self.driver.quit()
    
    def test_deactivate(self):
        try:
            # Navigate to homepage
            self.driver.get("http://localhost/travel%20ease/")
            self.driver.set_window_size(1552, 880)
            
            # Login process
            login_link = self.wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Login")))
            login_link.click()
            
            # Fill login form
            email_field = self.wait.until(EC.presence_of_element_located((By.ID, "email")))
            email_field.send_keys("user@gmail.com")
            
            password_field = self.wait.until(EC.presence_of_element_located((By.ID, "password")))
            password_field.send_keys("User1234")
            
            submit_btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".submit-btn")))
            submit_btn.click()
            
            # Wait for login to complete and check if we're redirected
            time.sleep(2)
            
            # Print current URL for debugging
            print(f"Current URL after login: {self.driver.current_url}")
            
            # Navigate directly to profile page
            self.driver.get("http://localhost/travel%20ease/profile.php")
            
            # Wait for profile page to load
            time.sleep(2)
            
            # Print current URL for debugging
            print(f"Current URL after navigation: {self.driver.current_url}")
            
            # Try different selectors for the deactivate button
            deactivate_selectors = [
                (By.CSS_SELECTOR, ".bg-red-600"),          # Original selector
                (By.CSS_SELECTOR, "button[type='button']"), # Generic button
                (By.CSS_SELECTOR, ".deactivate-btn"),       # Class name
                (By.CSS_SELECTOR, "#deactivateBtn"),        # ID
                (By.LINK_TEXT, "Deactivate Account"),       # Link text
                (By.XPATH, "//button[contains(text(), 'Deactivate')]")  # XPath
            ]
            
            deactivate_btn = None
            for selector in deactivate_selectors:
                try:
                    print(f"Trying selector: {selector}")
                    deactivate_btn = self.wait.until(EC.element_to_be_clickable(selector))
                    if deactivate_btn:
                        print(f"Found deactivate button with selector: {selector}")
                        break
                except Exception as e:
                    print(f"Selector {selector} failed: {str(e)}")
                    continue
            
            if not deactivate_btn:
                # Take screenshot for debugging
                self.driver.save_screenshot("deactivate_failed.png")
                raise Exception("Could not find deactivate button. Check screenshot 'deactivate_failed.png'")
            
            deactivate_btn.click()
            
            # Wait for confirmation dialog
            time.sleep(1)
            
            # Try different selectors for the confirm button
            confirm_selectors = [
                (By.CSS_SELECTOR, ".bg-red-500"),          # Original selector
                (By.CSS_SELECTOR, "button[type='submit']"), # Submit button
                (By.CSS_SELECTOR, ".confirm-btn"),          # Class name
                (By.CSS_SELECTOR, "#confirmBtn"),           # ID
                (By.XPATH, "//button[contains(text(), 'Confirm')]")  # XPath
            ]
            
            confirm_btn = None
            for selector in confirm_selectors:
                try:
                    print(f"Trying selector: {selector}")
                    confirm_btn = self.wait.until(EC.element_to_be_clickable(selector))
                    if confirm_btn:
                        print(f"Found confirm button with selector: {selector}")
                        break
                except Exception as e:
                    print(f"Selector {selector} failed: {str(e)}")
                    continue
            
            if not confirm_btn:
                # Take screenshot for debugging
                self.driver.save_screenshot("confirm_failed.png")
                raise Exception("Could not find confirm button. Check screenshot 'confirm_failed.png'")
            
            confirm_btn.click()
            
            # Wait for alert and verify message
            alert = self.wait.until(EC.alert_is_present())
            assert alert.text == "Account deactivated successfully!"
            alert.accept()
            
        except Exception as e:
            print(f"Test failed with error: {str(e)}")
            # Take screenshot on failure
            self.driver.save_screenshot("test_failure.png")
            raise
  
